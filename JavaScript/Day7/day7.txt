Date 객체
    - 날짜, 시간등을 쉽게 다룰 수 있는 내장 객체
    - 사용자의 컴퓨터 기준의 시간을 보여주기 때문에 보는사람마다 시간이 다를 수 있음
      (브라우저의 시간을 가져옴 서버와는 상관없음)
    - 연산가능
            2021-10-02 + 100       <- 이렇게하면 100일 후로 날짜연산

    - 객체 만드는 법

            const 객체명 = new Date();   //현재 날짜 시간을 가진 객체가 만들어짐
    
    
    연도(year)
        *월은 0월부터 있다. 인덱스처럼!!

        2자리로 표현 : 1900 ~ 1999
            const date = new Date(21,6,20);   //1921년 7월 20일

        4자리로 표현 : 2000 ~
            const date = new Date(2021,6,20);  // 2021년 7월 20일


    월(month)
        범위 0~11(1월 ~ 12월)
            const date = new Date(2021, 5, 20); // 2021년 6월 20일


    일(day), 시(hour), 분(minute), 초(secounds)    는 그냥 숫자대로.



Date객체를 만드는 방법

    1. new Date() : 현재 날짜 시간을 저장하는 객체가 만들어짐(브라우저 기준)
    2. new Date("날짜 문자열") : 해당 날짜 시간을 가리키는 객체가 만들어짐
        new Date("2021-05-20");
    3. new Date("Timestamp 밀리초") : 1970년 1월 1일 0시 ~ 해당 밀리초만큼 지난 시간의 날짜 객체가 만들어짐
    4. new Date(년, 월, 일, 시, 분, 초, 밀리초 ) : 해당 특정 날짜 시간을 가리키는 객체가 만들어짐



---------------------------------------------------------------------------------------------------------


window 객체
    - 자바스크립트의 브라우저 객체중 최상위
    - 현재 웹 브라우저의 창이나 탭을 표현하기 위한 객체
    - 비표준 객체 (브라우저마다 다르게 구현된다. 표준이없다.) -> 그래서 과거에는 많이사용했으나 최근에는 필요한것만..

    


    setTimeout() : 일정 시간이 지난 후 매개변수로 제공된 함수를 실행

        function 함수명(){
            ...
        }

        const 상수명 = setTimeout(함수명, 시간);

    clearTimeout() : setTimeout()에서 실행된 함수를 취소

        clearTimeout(SetTimeout의 이름);

    
    setInterval() : 일정 시간마다 매개변수로 제공된 함수를 실행

        fucntion 함수명(){
            ...
        }

        const 상수명 = setInterval(함수명, 시간);

    clearInterval() : setInterval()에서 실행된 함수를 취소

        clearInterval(setInterval의 이름);


-----------------------------------------------------------------------------------------------------------


콜백 함수(Callback Function)
    - 파라미터로 함수를 전달받아 함수의 내부에서 실행하는 함수

        const num = [1,2,3,4,5];

        num.forEach(x => {    //forEach는 배열로만 쓸수있음.
            console.log(x*10);
        });

        //출력
        10
        20
        30
        40
        50

        위와 같은 내용의 일반 함수식

        num.forEach(function(x){  //익명함수
            console.log(x*10);
        })




👿 콜백지옥 !           *많이 쓰이는 형태이긴하다. 이유는.. 

    function add(x, callback){ //callback  얘를 불러주는 쪽으로 데이터를 돌려줌
        let sum = x + x;
        console.log(sum);
        callback(sum);
    }

    add(10,function(result){
        add(result, function(result){
            add(result, function(result){
                ...

            })
        })
    });



----------------------------------------------------------------------------------------------------------------



문서 객체 모델 (Document Object Model) - DOM 이라고도 부름
    - XML이나 HTML문서에 접근하기 위한 일종의 인터페이스
    - 문서내에 모든 요소를 정의하고 요소에 접근하는 방법을 제공


        <html lang="ko">
        <head>
            <title>초간단 문서</title>
        </head>
        <body>
            <h2>초간단 문서</h2>
            <p>간단한 문서</p>
        </body>
        </html>

                                

    - 트리형태
                                
                                
                                document 객체

                                <html> - lang
                                
                    <head>                    <body>                     -> html의 자식
                    <title>             <h2>          <p>                -> html의 자손 (자식에 포함됨)
                  초간단 문서         초간단 문서   간단한 문서             -> html의 자손 (자식에 포함됨)
      
      
        조상 > 부모
        자손 > 자식





document 객체
    - 웹 페이지 자체를 의미
    - 웹 페이지에 존재하는 HTML요소에 접근할 때는 반드시 document 객체로 부터 시작


메소드

    -   document.getElementsByTagName() : 해당 태그 이름의 요소를 모두 선택

            const tag = document.getElementsByTagName('h2');  // 모두 선택되기때문에 객체가 배열로 저장됨.

    -   document.getElementById() : 해당 아이디의 요소를 선택
                //만약 잘못 해서 같은이름을 가진 id가 여러개있다면  첫번째 선언한 id만 가져옴

    -   document.getElementsByClassName() : 해당 클래스에 속한 요소를 모두 선택

    -   document.getElementsByName() : 해당 name속성값을 가지는 요소를 모두 선택
                // 예를들어 체크박스나 라디오같이 같은네임을 가지고 그룹핑 된 애들이 있을 수 있음.
    
    -   document.querySelectorAll() : 해당 선택자로 선택되는 요소를 모두 선택
            
            const sel = document.querySelectorAll('div > p');
            //div자식인 p태그를 모두 가져와라
        



노드(Node)

    - HTML DOM은 노드라고 불리는 계층적 단위에 정보를 저장
    - 노드트리는 노드들의 집합이며 노드간의 관계를 보여줌
       (태그 하나하나 안에는 그 태그의 위치 정보가 있다.)



    노드의 종류

        - 문서 노드(document node) : 문서 전체를 나타내는 노드
        - 요소 노드(element node) : HTML 요소는 요소 노드이며, 속성 노드를 가질 수 있는 유일한 노드
        - 속성 노드(attribute node) : HTML 요소의 속성은 속성 노드이며, 요소 노드에 관한 정보를 가지고 있음
        - 텍스트 노드(text node) : HTML 문서의 모든 텍스트는 텍스트 노드
        - 주석 노드(comment node) : 모든 주석은 주석 노드

    노드간의 관계

        parentNode : 부모노드
        childNode : 자식노드 리스트
        firstChild : 첫 번째 자식 노드
        lastChild : 마지막 자식 노드
        nextSibling : 다음 형제 노드
        previousSibling :  이전 형제 노드


    
        



🎁 과제 

    1. 주민등록번호를 입력받아 (prompt)
    2. 유효성 체크

     ex )   
      주민등록번호를 입력하세요..
      0010113068518


    1. 각 자리에 2,3,4,5,6,7,8,9,2,3,4,5 를 곱해줌. 단 마지막자리는 빼놓음

    0 0 1 0 1 1 3 0 6 8 5 1            <<8>>
    * * * * * * * * * * * * 
    2 3 4 5 6 7 8 9 2 3 4 5

    0 0 4 0 6 7 24 0 12 24 20 5
    
    
    2. 각 자리의 숫자를 모두 더함

    0 + 0 + 4 + 0 + 6 + 7 + 21 + 0 + 12 + 24 + 20 + 5 = 102


    3. 11로 나눈 나머지 값을 구함

        102 % 11 = 3

    
    4. 11에서 결과 값을 뺌(단, 마지막 결과가 두자리인 경우 다시 10으로 나눈 나머지 값을 구함)
            if문 처리

        
       11 - 3 = 8
       만약 11 - 1 = 10 -> 10 % 10 = 0


    5. 결과가 주민등록번호 마지막 번호와 일치하면 유효한 주민등록번호임
